console method
- log
- error
- table
- group
- groupEnd

document method
- write
- querySelector

window method
- alert

Data Type
- console.log(Typeof "Ahmed Nasser"); => string
- console.log(Typeof 123); => number
- console.log(Typeof [1, 2, 3]); => array,object
- console.log(Typeof [a, b, c]); => array,object
- console.log(Typeof {name: "Ahmed", age: 17, country: "eg"}); => object
- console.log(Typeof true); => boolean
- console.log(Typeof false); => boolean
- console.log(Typeof undefined); => undefined
- console.log(Typeof null); => boolean

?
NaN = [N]ot [a] [N]umber
<script defer> [defer] => Execute the code after the page is loaded <!>important<!>

Character Escape Sequences
- \' single quote
- \" double quote
- \\ backslash
- \n new line
- \r carriage return
- \t tab
- \b backspace
- \f form feed
- \v vertical tab (Internet Explorer 9 and older treats '\v as 'v instead of a vertical tab ('\x0B). If cross-browser compatibility is a concern, use \x0B instead of \v.)
- \0 null character (U+0000 NULL) (only if the next character is not a decimal digit; else it is an octal escape sequence)
- \xFF character represented by the hexadecimal byte "FF"
Note that the \v and \0 escapes are not allowed in JSON strings.

Example code:

class hw {
   public static void main() {
       System.out.println("Using 'Back slash n': \n It will move the words to the nxt line");//\n
       System.out.println("Using 'Back slash tab': \t It will move the Word by one tab");//\t
       System.out.println("Using 'backslash R' \r It will do the same as back slash n'");//\r
   }
}



JavaScript

=====
Data Types

Number:-
- 5
- 1.4
- 3e2
- 3e-2

String:-
- "Ahmed"
- 'Ahmed'

Boolean:-
- true
- false

Array => Object
- [10, 20, 30]

Object:-
- {name: "Ahmed", age: 17, country: "Eg"}
- null

typeof undefined = undefined
=====

=====
Comments in js:-
- // this is comment
- /* this is comment */
- /*
     this is comment
  */
=====

=====
Variable in JS

Ways to Declare a JavaScript Variable:-
- using var
- using let
- using const
- using nothing = var

syntax:-
- var a = "anything";
- let b = "anything";
- const c = "anything";
- d = "anything";

var:-
- redeclare (Yes)
- access before declare (undefined)
- variable scoop drama [add in window] ()
- block or function scope
let:-
- redeclare (No => Error)
- access before declare (Error)
- variable scoop drama ()
- block or function scope
const:-
- redeclare (No => Error)
- access before declare (Error)
- variable scoop drama ()
- block or function scope
=====

=====
Arithmetic Operators in js

operator:-  Description:-
- +         - addition
- -         - subtraction
- *         - Multiplication
- /         - Division
- %         - Modulus (Remainder)
- **        - Exponentiation (ES7)
- ++        - Increment [post / pre]
- --        - Decrement [post / pre]

Examples:-
let a = 1;
console.log(1 + 1);   // Return 2
console.log(1 - 1);   // Return 0
console.log(5 * 5);   // Return 25
console.log(5 / 5);   // Return 1
console.log(5 % 6);   // Return 5
console.log(5 ** 2);  // Return 25 
console.log(++a);     // Return 2 (2)
console.log(a++);     // Return 2 (3)000.0


console.log(--a);     // Return 2 (2)
console.log(a--);     // Return 2 (1)
=====

=====
Unary Operator in JS

Unary plus (+) [return number if its not a number]
Unary negation (-) [return number if its not a number + negates it]

unary plus Example:-
examples                       return
- +3                           - 3
- +"3"                         - 3
- +"-3"                        - -3
- +"3.14"                      - 3.14
- +"123e-5"                    - 0.00123
- +"0xff"                      - 255
- +true                        - 1
- +false                       - 0
- +null                        - 0
- +"Infinity"                  - Infinity
- +"not a number"              - NaN
- +function (val){return val}  - NaN

Unary negation Example:-
examples                       return
- -3                           - -3
- -"3"                         - -3
- -"-3"                        - 3
- -"3.14"                      - -3.14
- -"123e-5"                    - -0.00123
- -"0xff"                      - -255
- -true                        - -1
- -false                       - -0
- -null                        - -0
- -"Infinity"                  - -Infinity
- -"not a number"              - -NaN
- -function (val){return val}  - -NaN
=====

=====
Assignment Operators in JS

operator    example     same as
- =         - x = y     - x = y
- +=        - x += y    - x = x + y
- -=        - x -= y    - x = x - y
- *=        - x *= y    - x = x * y
- /=        - x /= y    - x = x / y
- %=        - x %= y    - x = x % y
- <<=       - x <<= y   - x = x << y
- >>=       - x >>= y   - x = x >> y
- >>>=      - x >>>= y  - x = x >>> y
- &=        - x &= y    - x = x & y
- ^=        - x ^= y    - x = x ^ y
- |=        - x |= y    - x = x | y
- **=       - x **= y   - x = x ** y

example        return
let x = 10;
x = 10;        // 10
x += 5;        // 15
x -= 5;        // 10
x *= 5;        // 100
x /= 2;        // 5
x %= 5;        // 0
x <<= 1;       // 20
x >>= 1;       // 5
x >>>= 1;      // 5
x &= 5;        // 0
x ^= 5;        // 15
x |= 5;        // 15
x **= 2;       // 100
=====

====
Number

Method to Type Number:-
- double precision
- syntactic sugar "_"
- e
- e-
- with decimal

Example:-
console.log(1000000);   // 1000000
console.log(1_000_000); // 1000000
console.log(1e6);       // 1000000
console.log(1e-6);      // 0.000001
console.log(1000000.0); // 1000000

Constructor:-     Explain:-
- Number()        - create a new number value

Example:-
console.log(number(123));  // 123
=====

=====
Static Properties Number:-

Properties:-               Explain:-
- Number.EPSILON           - The smallest interval between two representable numbers
- Number.MAX_SAFE_INTEGER  - the max safe integer in js
- Number.MAX_VALUE         - The largest positive representable number
- Number.MIN_SAFE_INTEGER  - the min safe integer in js
- Number.MIN_VALUE         - The smallest positive representable number
- Number.NaN               - Special "Not a Number" value
- Number.NEGATIVE_INFINITY - Special value representing negative infinity
- Number.POSITIVE_INFINITY - Special value representing infinity

Example:-
console.log(Number.EPSILON);            // 2.220446049250313e-16
console.log(Number.MAX_SAFE_INTEGER);   // 9007199254740991
console.log(Number.MAX_VALUE);          // 1.7976931348623157e+308
console.log(Number.MIN_SAFE_INTEGER);   // -9007199254740991
console.log(Number.MIN_VALUE);          // 5e-324
console.log(Number.NaN);                // NaN
console.log(Number.NEGATIVE_INFINITY);  // -infinity
console.log(Number.POSITIVE_INFINITY);  // infinity
=====

=====
Static Methods Number:-

Properties:-               Explain:-
- Number.isNaN()           - type check is number or not (Yes / No)
- Number.isFinite()        - Determine whether the passed value is a finite number
- Number.isInteger()       - Determine whether the passed value is an integer
- Number.isSafeInteger()   - Determine whether the passed value is a safe integer
(number between -(2^53 - 1) and 2^53 - 1)
- Number.parseFloat(string)- return string number to number with decimals
- Number.parseInt(string)  - return string number to number without decimals

Example:-
- console.log(Number.isNaN(5));             // false
- console.log(Number.isNaN("A"));           // true
- console.log(Number.isFinite(2));          // true
- console.log(Number.isFinite(NaN));        // false
- console.log(Number.isFinite(infinity));   // false
- console.log(Number.isInteger(1));         // true
- console.log(Number.isInteger(0.1));       // false
- console.log(Number.isSafeInteger(3));     // true
- console.log(Number.isSafeInteger(3.1));   // false
- console.log(Number.parseFloat("5.5 hi")); // 5.5
- console.log(Number.parseInt("5.5 hi"));   // 5
=====

=====
Instance methods Number:-

Properties:-                        Explain:-
- toExponential(fractionDigits)     - Returns a string representing the number in exponential notation
- toFixed(digits)                   - Returns a string representing the number in fixed-point notation
- toPrecision(precision)            - Returns a string representing the number to a specified precision in fixed-point or exponential notation
- toString([radix])                 - Return number to string
- toLocaleString([locales [, options]])  - Returns a string with a language sensitive representation of this number. Overrides the

Example:-
console.log(77.1234.toExponential());        // 7.71234e+1
console.log(77.1234.toExponential(2));       // 7.71e+1
console.log(123.123.toFixed());              // 123
console.log(123.123.toFixed(2));             // 123.12
console.log(123.123.toPrecision());          // 123.123
console.log(123.123.toPrecision(4));         // 123.1
let num = 5;
console.log(num.toString());                 // "5"
const number = 123456.789;
console.log(number.toLocaleString('ar-EG')); // ١٢٣٬٤٥٦٫٧٨٩
=====

=====
Math Object

Properties:-      Explain:-
- round()         - The value of the given number rounded to the nearest integer
- ceil()          - Round to the largest integer
- floor()         - Rounding to the smallest integer
- min()           - min number from list
- max()           - max number from list
- pow()           - see example
- random()        - random number between 1, 0
- trunc()         - remove decimal number

Example:-                           Return:-
console.log(Math.round(5.2));       // 5
console.log(Math.round(5.8));       // 6
console.log(Math.ceil(5.2));        // 6
console.log(Math.ceil(5.8));        // 6
console.log(Math.floor(5.2));       // 5
console.log(Math.floor(5.8));       // 5
console.log(Math.floor(-5.2));      // -6
console.log(Math.min(10, 20, -30)); // -30
console.log(Math.max(10, 20, -30)); // 20
console.log(Math.pow(2, 2));        // 4
console.log(Math.random());         // 0.123
console.log(Math.trunc(5.5));       // 5
12
=====

يحتفظ فقط بحوالي 17 منزلاً عشريًا من الدقة Numberيمكن أن
2/0 = infinty
-2/0 = -infinty

=====
String Methods

Properties:-        Explain:-
- charAt()          - access with index
- length            - return number letters
- trim()            - delete space on start and end string
- toUpperCase()     - change string to upper case
- toLowerCase()     - change string to lower case

Example:-
let x = 'hello';
let a = "  hello world   "
console.log(x.charAt(0));     // h
console.log(x.charAt(1));     // e
console.log(x.length);        // 5
console.log(a.trim());        // hello world
console.log(x.toUpperCase()); // HELLO
console.log(x.toLowerCase()); // hello
=====

=====
String Methods Part 2

Properties:-    Explain:-
- indexOf()     - find string in string
- lastIndexOf() - // // revers
- slice()       - cut string
- repeat()      - repeat anything
- split()       - cut string to array

Syntax:-
- indexOf(value [mand], start [opt, default 0])
- lastIndexOf(value [mand], start [opt])
- slice(start [mand], end [opt])
- split(separator [opt], limit [opt])

Example:-
let x = "hello";
console.log(x.indexOf("e"));     // 1
console.log(x.indexOf("a"));     // -1
console.log(x.indexOf("l", 1));  // 2
console.log(x.lastIndexOf("l")); // 3
console.log(x.slice(2));         // llo
console.log(x.repeat(2));        // hellohello
console.log(x.split("", 2));     // ["h", "e"]
=====

=====
String Methods Part 3

Properties:-    Explain:-
- substring()   - cut string
- substr()      - // //
- includes()    - include specific word
- startsWith()   - start with specific word
- endsWith()     - end with specific word

Syntax:-
- substring(start [mand], end [opt])
- substr(start [mand], number of character)
- includes(value [mand], length [opt])
- startsWith(value [mand], start [opt])
- endsWith(value [mand], length [opt])

Example:-
let x = "hello";
console.log(x.substring(1, 2));  // e
console.log(x.substr(2, 2));     // ll
console.log(x.includes("ll"));   // true
console.log(x.includes("llh"));  // false
console.log(x.startsWith("h"));  // true
console.log(x.endsWith("o"));    // true
=====

=====
Comparison Operators

Operator:-    Explain:-
- ==          - Returns true if the operands are equal
- !=          - Returns true if the operands are not equal
- ===         - Returns true if the operands are equal and of the same type
- !==         - Returns true if the operands are of the same type but not equal
- >           - Returns true if the left operand is greater then the right operand
- >=          - Returns true if the left operand is greater then or equal to the right operand
- <           - Returns true if the right operand is greater then the left operand
- <=          - Returns true if the right operand is greater then or equal to the left operand

Example:-   Return:-
6 == 6      // true
6 == "6"    // true
6 == 5      // false
6 != 6      // false
6 != 5      // true
6 === 6     // true
6 === "6"   // false
6 !== "6"   // true
6 > 5       // true
6 > "5"     // true
6 > 6       // false
6 >= 6      // true
6 < 6       // false
6 < 7       // true
6 <= 6      // true
=====

=====
Logical Operators

Operator:-    Explain:-
- &&          - And
- ||          - Or
- !           - Not

Example:-
console.log(true);                      // true
console.log(!true);                     // false
console.log(6 == 6);                    // true
console.log(!(6 == 6));                 // false
console.log(6 == 7 && 6 > 5 && 6 >= 6); // false
console.log(6 == 6 || 6 > 7 || 6 >= 5); // true
=====

=====
Control Flow

- if
- else if
- else

syntax:-
if (condition) {
   // block of code
}
--
if (condition) {
   // block of code
} else if (condition) {
   // block of code
} else {
   // block of code
}

example:-
let num = 1;

if (num > 0) {
    console.log(true);
}
// Return true
--
let light = false;

if (light === true) {
    console.log("Light ON");
} else if (light === false) {
    console.log("Light OFF");
} else {
    console.log("Error");
}
// Return Light OFF
=====

=====
Nested if

syntax:-
if (condition) {
   // block of code
} else {
   if (condition) {
      // block of code
   } else {
      if (condition) {
         //block of code
      }
   }
}

example:-
let A = 5;

if (A > 6) {
    console.log("A is smaller than 6");
} else {
    if (A == 10) {
        console.log("A is equal than 10");
    } else {
        if (A >= 5) {
            console.log("A is greater than 5 or equal");
        }
    }
}
// Return A is greater than 5 or equal
=====

=====
conditional operator

conditional:-
- ? if true
- : if false

syntax:-
condition ? // block of code : // block of code
--
condition
   ? // block of code
   : condition
   ? // block of code
   : condition
   ? // block of code
   : // block of code

example:-
let A = 5;
A > 6 ? console.log("A is greater than 6") : console.log("A is smaller than 6");
// Return A is smaller than 6
--
let B = 5;
B == 6
    ? console.log("B is equal 6")
    : B > 6
    ? console.log("B is greater than 6")
    : B < 4
    ? console.log("B is smaller than 4")
    : console.log("B is greater than 4");
// Return B is greater than 4
=====

=====
Switch statement

- switch (expression)
- case
- default
- break

Syntax:-
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}

Example:-
let Day = 0;
switch (Day) {
  case 0:
  case 1:
    console.log("Sunday");
    break;
  case 2:
    console.log("Monday");
    break;
  case 3:
    console.log("Tuesday");
    break;
  default:
    console.log("Unknown Day");
}
// Return Sunday
=====

=====
Arrays

syntax:-
- create array
let variableName = ["Element", "Element", "Element"];
let variableName = new Array("Element", "Element");
- create nested array
let variableName = ["Element", "Element", ["Element", "Element"]];
- access of array elements
variableName[indexOfElement]
- change array elements
variableName[indexOfElement] = "newElement";
- change nested array
variableName[indexOfNestedArray] = ["newElement", "newElement"];

example:-
- create array
let newArray = ["A", "B", "C"];
let newArray = new Array("A", "B");
- create nested array
let newArray = ["A", "B", "C", ["D", "E"]];
- access of array elements
console.log(`${newArray[0]}`);  // A
- change array elements
let arrayOne = ["A", "B", "C"];
arrayOne[0] = "D";
- change nested array
let arrayTwo = ["A", "B", "C", ["D", "E"]];
arrayTwo[3] = ["X", "Y"];

note:-
you can see type of array just type
let info = ["A", "B"];
console.log(Array.isArray(info)); // Returns true
=====

=====
Array methods search

- indexOf(search element, from index [opt])
- lastIndexOf(search element, from index [opt])
- includes(value to find, from index [opt]) [ES7]

let myFriends = ["Ahmed", "Mohamed", "Sayed", "Ali", "Ahmed"];

console.log(myFriends); // ['Ahmed', 'Mohamed', 'Sayed', 'Ali', 'Ahmed']

console.log(myFriends.indexOf("Ahmed"));     // 0
console.log(myFriends.indexOf("Ahmed", 2));  // 4

console.log(myFriends.includes("Ahmed"));     // true
console.log(myFriends.includes("Ahmed", 2));  // true

console.log(myFriends.indexOf("Gamal"));  // -1
=====

=====
Arrays methods [Sort]

Properties:-             Explain:-
- sort(function [opt])   - sorting the array alphabetical
- reverse()              - revers array

Example:-
let myFriends = [10, "Sayed", "Mohamed", "90", 9000, 100, 20, "10", -20, -10];
console.log(myFriends.sort());      // [-10, -20, 10, '10', 100, 20, '90', 9000, 'Mohamed', 'Sayed']
console.log(myFriends.reverse());   // ['Sayed', 'Mohamed', 9000, '90', 20, 100, '10', 10, -20, -10]
=====

=====
Arrays methods [Slicing]

Properties:-
- slice(start [opt], end [opt] not including end)
-- slice() => all array
-- default start => 0
-- negative count from end
-- if end undefined => slice to the end array
-- return new array
- splice(start [mand], delete count [opt] [0 no remove], the item to add [opt])
-- if negative => start from the end

Example:-
let myFriends = ["Ahmed", "Sayed", "Ali", "Osama", "Gamal", "Ameer"];
console.log(myFriends);
console.log(myFriends.slice());         // ['Ahmed', 'Sayed', 'Ali', 'Osama', 'Gamal', 'Ameer']
console.log(myFriends.slice(1));        // ['Sayed', 'Ali', 'Osama', 'Gamal', 'Ameer']
console.log(myFriends.slice(1, 3));     // ['Sayed', 'Ali']
console.log(myFriends.slice(-3));       // ['Osama', 'Gamal', 'Ameer']
console.log(myFriends.slice(1, -2));    // ['Sayed', 'Ali', 'Osama']
console.log(myFriends.slice(-4, -2));   // ['Ali', 'Osama']
console.log(myFriends);                 // ['Ahmed', 'Sayed', 'Ali', 'Osama', 'Gamal', 'Ameer']

myFriends.splice(1, 2, "Sameer", "Omar");
console.log(myFriends);  // ['Ahmed', 'Sameer', 'Omar', 'Osama', 'Gamal', 'Ameer']
=====

=====
Array methods [joining]

Properties:-
- concat(array, array) => return a new array
- join(separator)

Example:-
let myFriends = ["Ahmed", "Sayed", "Ali", "Gamal", "Ameer"];
let myNewFriends = ["Omar", "Sameh"];
let schoolFriends = ["Haytham", "Shady"];

let allFriends = myFriends.concat(myNewFriends, schoolFriends, "Gameel", [1, 2]);
console.log(allFriends);
// ['Ahmed', 'Sayed', 'Ali', 'Gamal', 'Ameer', 'Omar', 'Sameh', 'Haytham', 'Shady', 'Gameel', 1, 2]

console.log(allFriends.join());                  // Ahmed,Sayed,Ali,Gamal,Ameer,Omar,Sameh,Haytham,Shady,Gameel,1,2
console.log(allFriends.join(""));                // AhmedSayedAliGamalAmeerOmarSamehHaythamShadyGameel12
console.log(allFriends.join(" # "));
// Ahmed # Sayed # Ali # Gamal # Ameer # Omar # Sameh # Haytham # Shady # Gameel # 1 # 2
console.log(allFriends.join("|"));               // Ahmed|Sayed|Ali|Gamal|Ameer|Omar|Sameh|Haytham|Shady|Gameel|1|2
console.log(allFriends.join("|").toUpperCase()); // AHMED|SAYED|ALI|GAMAL|AMEER|OMAR|SAMEH|HAYTHAM|SHADY|GAMEEL|1|2
=====

=====
For Loop

# propertie:-
- For

# syntax:-
for ([initialExpression]; [conditionExpression]; [incrementExpression]) {
  // Code Block
}

# Example:-
for (let i = 0; i < 5; i++) {
  console.log(i);
}

Returns:-
0
1
2
3
4

# Second Example:-
let myFriends = ["Osama", "Ahmed", "Sayed", "Ali"];

// console.log(myFriends[0]);
// console.log(myFriends[1]);
// console.log(myFriends[2]);
// console.log(myFriends[3]);
// console.log(myFriends[4]);

for (i = 0; i < myFriends.length; i++) {
  console.log(myFriends[i]);
}

Returns:-
Osama
Ahmed
Sayed
Ali

# Advanced Example:-
let products = ["Keyboard", "Mouse", "Pen", "Pad", "Monitor", "iPhone"];
let i = 0;

for (;;) {
  console.log(products[i]);
  i++;
  if (i === products.length) break;
}

Returns:-
Keyboard
Mouse
Pen
Pad
Monitor
iPhone

# Second Advanced Example:-
let myFriends = [1, 2, "Osama", "Ahmed", 3, 4, "Sayed", 6, "Ali"];
let onlyNames = [];

for (let i = 0; i < myFriends.length; i++) {
  if (typeof myFriends[i] === "string") {
    onlyNames.push(myFriends[i]);
  }
}
console.log(onlyNames);
Returns:-
['Osama', 'Ahmed', 'Sayed', 'Ali']
=====

=====
Nested Loop

Syntax:-
for () {
  // main loop
  for () {
    // nested loop
  }
}

# Example:-
let products = ["Keyboard", "Mouse", "Pen", "Pad", "Monitor"];
let colors = ["Red", "Green", "Black"];
let models = ["2014", "2015"];

for (let i = 0; i < products.length; i++) {
  console.log("#".repeat(15));
  console.log(`# ${products[i]}`);
  console.log("#".repeat(15));
  console.log("Color: ");
  for (let j = 0; j < colors.length; j++) {
    console.log(`- ${colors[j]}`);
  }
  console.log("Models: ");
  for (let k = 0; k < models.length; k++) {
    console.log(`- ${models[k]}`);
  }
}
// Try it yourself

# Product practice example:-
let products = ["Keyboard", "Mouse", "Pen", "Pad", "Monitor", "iPhone"];
let colors = ["Red", "Green", "Blue"];
let showCount = 3;

document.write(`<h1>Show ${showCount} Products</h1>`);

for (let i = 0; i < showCount; i++) {
  document.write(`<div>`);
  document.write(`<h3>[${i + 1}] ${products[i]}</h3>`);
  for (let j = 0; j < colors.length; j++) {
    document.write(`<p>${colors[j]}</p>`);
  }
  document.write(`<p>${colors.join(' | ')}</p>`);
  document.write(`</div>`)
}
// Try it yourself
=====

=====
Loop Control

# Properties:-
- Break
- Continue
- Label

# Syntax:-
for () {
  // Code Block
  break;
}

for () {
  // Code Block
  continue;
}

mainLoop: for () {
  // Code Block
  nestedLoop: for () {
    // Code Block
  }
}

# Break Example:-
let products = ["Keyboard", "Mouse", "Pen", "Pad", "Monitor"];

for (let i = 0; i < products.length; i++) {
  console.log(products[i]);
  if (products[i] === "Pen") {
    break;
  }
}
// Try it yourself

# Continue Example:-
let products = ["Keyboard", 1, "Mouse", 2, "Pen", "Pad", 3, "Monitor"];

for (let i = 0; i < products.length; i++) {
  if (typeof products[i] === "number") {
    continue;
  }
  console.log(products[i]);
}
// Try it yourself
=====

=====
While

Syntax:-
while (condition) {
  statement
}

Example:-
let n = 0;

while (n < 2) {
  console.log(n);
  n++;
}
// Returns 0 1

Second example:-
let products = ["Keyboard", "Mouse", "Pen", "Pad", "Monitor", "iPhone"];
let i = 0;

while (i < products.length) {
  console.log(products[i]);
  i++;
}
// Returns all products
=====

=====
Do While

Syntax:-
do {
  statement
} while (condition);

Example:-
let i = 0;

do {
  console.log(i);
  i++
} while (false);
// Returns 0

Second example:-
let products = ["Keyboard", "Mouse", "Pen", "Pad", "Monitor", "iPhone"];
let i = 0;

do {
  console.log(products[i]);
  i++
} while (i < products.length);
// Returns all products
=====

=====
Function

Syntax:-
function nameOfFunc(argument, argument) {
  // Code Block
}

Simple Example:-
function sayHello() {
  console.log(`Hello Ahmed`);
}
sayHello()

Simple Example:-
function sayHello(userName) {
  console.log(`Hi ${userName}`);
}
sayHello("Ahmed");

Advanced Example:-
function sayHello(userName, Age) {
  if (Age < 20) {
    console.log("App is Not Suitable For You");
  } else {
    console.log(`Hello ${userName} Your Age is ${Age}`);
  }
}
sayHello('Sayed', 21);
sayHello('Ali', 22)
sayHello('Ahmed', 17);

Advanced Example:-
function generateYears(start, end, exclude) {
  for (let i = start; i <= end; i++) {
    if (i === exclude) {
      continue;
    } else {
      console.log(i);
    }
  }
}
generateYears(2004, 2022, 2020);
=====

=====
Function Return

Properties:-
- return

Example:-
function calc(num1, num2) {
  return num1 + num2;
}
let result = calc(5, 5);
console.log(result);

Advanced Example:-
function generate(start, end) {
  for (let i = start; i <= end; i++) {
    if (i === 15) {
      return `Interruptting`;
    }
    console.log(i);
  }
}
generate(10, 20);
=====

=====
Default function parameters

Example:-
function sayHi(user, age = "Unknown") {
  // if (age === undefined) {
  //   age = "Unknown"
  // }
  // age = age || "Unknown"
  return `Hi ${user} Your Age is ${age}`;
}
console.log(sayHi("Ahmed"));
=====

=====
Function Rest

Example:-
function calc(...number) {
  let result = 0;
  for (let i = 0; i < number.length; i++) {
    result += number[i];
  }
  return `Final result ${result}`;
}
console.log(calc(50, 40, 10));
// Returns 100
=====

=====
Advanced Example Function

function showInfo(us = "Un", ag = "Un", rt = 0, show = "Yes", ...sk) {
  document.write(`<div>`);
  document.write(`<h2>Welcome, ${us}</h2>`);
  document.write(`<p>Age: ${us}</p>`);
  document.write(`<p>Hour Rate: $${rt}</p>`);
  if (show === "Yes") {
    if (sk.length > 0) {
      document.write(`<p>Skills: ${sk.join(" | ")}</p>`);
    } else {
      document.write(`<p>Skills: No Skills</p>`);
    }
  } else {
    document.write(`<p>Skills is hidden</p>`);
  }
  document.write(`</div>`);
}
showInfo("Ahmed", 17, 20, "Yes", "Html", "CSS", "JS");
=====

=====
Nested Function

Example:-
function sayMessage(fName, lName) {
  let message = `Hello`;
  // Nested Function
  function concatMsg() {
    message = `${message} ${fName} ${lName}`;
  }
  concatMsg();
  return message;
}
console.log(sayMessage("Ahmed", "Nasser"));
// Hello Ahmed Nasser

Second Example:-
function sayMessage(fName, lName) {
  let message = `Hello`;

  // Nested Function
  function concatMsg() {
    function getFullName() {
      return `${fName} ${lName}`
    }
    return `${message} ${getFullName()}`;
  }
  return concatMsg();
}
console.log(sayMessage("Ahmed", "Nasser"));
// same return
=====

=====
Arrow Function

Syntax 1:-
(param) => expression

Syntax 2:-
(param1, param2) => expression

Syntax 3:-
(param) => {
  // Code Block
  // Code Block
}

Example 1:-
// let print = function () {
//   return 10;
// }

let print = () => 10;
console.log(print());
// 10
Note: if you dont have param you can use _ seem ()

Example 2:-
// let print = function (num) {
//   return num;
// }

let print = num => num;
console.log(print(5));
// 5

Example 3:-
// let print = function (num1, num2) {
//   return num1 +num2;
// }

let print = (num1, num2) => num1 + num2;
console.log(print(2, 2));
// 4
=====

=====
Function Self-invoking

Syntax:-
(function(){
  // code block
})();

Example:-
(function(num1, num2){
  console.log(num1 + num2);
})(2, 2);
// 4
=====

=====
Scope

Note: var dont have any scope block and you can declared outside {}
Note: if you don't use var,let,const before variable is auto create in global scope

Block Scope:-
{
  let x = 2;
}
// x can NOT be used here

{
  var x = 2;
}
// x CAN be used here

Local Scope:-
// code here can NOT use carName

function myFunction() {
  let carName = "Volvo";
  // code here CAN use carName
}

// code here can NOT use carName

Global JavaScript Variables:-
let carName = "Volvo";
// code here can use carName

function myFunction() {
// code here can also use carName
}

Automatically Global:-
function myFunction() {
  carName = "Volvo";
}
myFunction();

// code here can use carName
=====

=====
Higher Order Functions

Note:HOF mean Higher Order Function [this my cut].
Note:HOF accepts function as parameters and/or returns function.

.reduce() 
.forEach() 
.filter() 
.map()
=====

=====
HOF Map

- methods creates a new array
- populated with the results of calling a provided function on every element
- in the calling array

Syntax:-
map(callBackFunc(Element, Index, Array) { }, thisArg)
- Element => The current element being processed in the array
- Index => The index of the current element being processed in the array
- Array => The current array

Example:-
let myNums = [1, 2, 3, 4, 5, 6];
let newArray = [];

for (let i = 0; i< myNums.length; i++) {
  newArray.push(myNums[i] + myNums[i]);
}
console.log(newArray);
// [2, 4, 6, 8, 10, 12]

// Same idea with map

// Anonymous Func
let addSelf = myNums.map(function(element, index, arr) {
  return element + element;
}, 10);
console.log(addSelf);

// Arrow Func
let addSelfArrow = myNums.map((e) => e + e);
console.log(addSelfArrow);

// Func in Param
function addition(e) {
  return e + e;
}
let add = myNums.map(addition);
console.log(add);
=====

=====
HOF Map More Examples

// Example 1
let swappingCases = "aHMEd"

let sw = swappingCases.split("").map(function(e) {
  return e === e.toUpperCase() ? e.toLowerCase() : e.toUpperCase();
}).join("");
console.log(sw);
// AhmeD

// Example 2
let invertedNumbers =[1, -10, -20, 15, 100, -30];

inv = invertedNumbers.map(function(e) {
  return -e;
})
console.log(inv);
// [-1, 10, 20, -15, -100, 30]

// Example 3
let ignoreBooleans = "Ah12m5ed0"

ign = ignoreBooleans.split("").map(function(e) {
  return isNaN(parseInt(e)) ? e : "";
}).join("");
console.log(ign);
// Ahmed
=====